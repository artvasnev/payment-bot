// Telegram –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–ø–ª–∞—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
// –î–ª—è –∑–∞–ø—É—Å–∫–∞: npm install node-telegram-bot-api dotenv
// node bot.js

const TelegramBot = require('node-telegram-bot-api');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
try {
    require('dotenv').config();
} catch (error) {
    console.log('üìù dotenv –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã');
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.BOT_TOKEN || '7581144814:AAGPfo6zeT6vJDW5RlH5B5BpAr8-fhyeOLU';

console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', process.env.NODE_ENV || 'production');
console.log('ü§ñ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω:', token ? '–î–∞' : '–ù–µ—Ç');
console.log('üåê –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

const bot = new TelegramBot(token, { polling: true });

// –¢–∞—Ä–∏—Ñ—ã –∫–æ–º–∏—Å—Å–∏–π
const packageRates = {
    '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä': { rate: 0.07, name: '—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä' },
    '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ': { rate: 0.08, name: '—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ' },
    '–ú–∞—Å—à—Ç–∞–±': { rate: 0.10, name: '–º–∞—Å—à—Ç–∞–±' },
    '–ê–±—Å–æ–ª—é—Ç': { rate: 0.12, name: '–∞–±—Å–æ–ª—é—Ç' }
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const userSessions = {};

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function deleteMessage(chatId, messageId) {
    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—å—ë–∑–Ω—ã–µ –æ—à–∏–±–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ
        if (error.response && error.response.statusCode === 403) {
            console.log(`–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
        }
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏ —Ç.–¥.)
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º (–≤ —Ç—ã—Å—è—á–∞—Ö —Å "–∫")
function formatAmount(num) {
    if (num >= 1000) {
        return (num / 1000) + '–∫';
    }
    return num.toString();
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ
function generateSaleMessage(data) {
    const { clientName, masterName, packageType, practicesCount, totalAmount, paidAmount, remainderPayments } = data;
    
    const rate = packageRates[packageType].rate;
    const packageName = packageRates[packageType].name;
    const commission = Math.round(paidAmount * rate);
    const remainder = totalAmount - paidAmount;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
    let paymentDescription;
    if (paidAmount >= totalAmount) {
        paymentDescription = `—ç—Ç–æ –æ–¥–∏–Ω –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞ ${practicesCount} –ø—Ä–∞–∫—Ç–∏–∫${practicesCount > 1 && practicesCount < 5 ? '–∏' : practicesCount >= 5 ? '' : '—É'}`;
    } else {
        paymentDescription = `—ç—Ç–æ –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥`;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
    const isFemale = clientName.toLowerCase().endsWith('–∞') || clientName.toLowerCase().endsWith('—è') || clientName.toLowerCase().endsWith('–Ω–∞');
    const masterIsFemale = masterName.toLowerCase().endsWith('–∞') || masterName.toLowerCase().endsWith('—è') || masterName.toLowerCase().endsWith('–Ω–∞');
    
    let message = `–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞!üóùÔ∏è
${clientName}.
–ù–∞–±–æ—Ä ¬´${packageName}¬ª –∏–∑ ${practicesCount} –ø—Ä–∞–∫—Ç–∏–∫${practicesCount > 1 && practicesCount < 5 ? '–∏' : practicesCount >= 5 ? '' : '–∏'}

–í–µ–ª${masterIsFemale ? '–∞' : ''} ${isFemale ? '–µ—ë' : '–µ–≥–æ'} ${masterName} üëèüèº

–°–µ–π—á–∞—Å ${clientName} –æ—Ç–ø—Ä–∞–≤–∏–ª${isFemale ? '–∞' : ''} –ø–æ —Ñ–∞–∫—Ç—É ${formatAmount(paidAmount)} , ${paymentDescription}

–ó–∞ –≤–µ–¥–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äì ${Math.round(rate * 100)}% –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Ç–∞–∫ –∫–∞–∫ –Ω–∞–±–æ—Ä ${packageName})

–°–µ–π—á–∞—Å —Å ${formatAmount(paidAmount)} - ${Math.round(rate * 100)}% - —ç—Ç–æ ${formatNumber(commission)} —Ä`;
    
    if (remainder > 0) {
        if (remainderPayments && remainderPayments.length > 0) {
            message += `\n–û—Å—Ç–∞—Ç–æ–∫ ${formatAmount(remainder)}:`;
            remainderPayments.forEach((payment, index) => {
                message += `\n‚Ä¢ ${formatAmount(payment.amount)} –¥–æ ${payment.date}`;
            });
        } else {
            message += `\n–û—Å—Ç–∞—Ç–æ–∫ ${formatAmount(remainder)}.`;
        }
    } else {
        message += `\n–û—Å—Ç–∞—Ç–æ–∫ 0.`;
        if (packageType === '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ') {
            message += `\n–ù—É –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –µ—â—ë –Ω–µ —Ä–µ—à–∏—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–µ–ª–∞—Ç—åüòä –¥—É–º–∞—é, —á—Ç–æ –µ—â—ë –∑–∞—Ö–æ—á–µ—Ç –µ—â—ë)`;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (packageType === '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä') {
        message += `\n\n–ü–æ—à–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã! –ú—ã —Å –≤–∞–º–∏ –≤–º–µ—Å—Ç–µ —É–∫—Ä–µ–ø–∏–ª–∏ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç üëèüèº`;
    } else if (packageType === '–ú–∞—Å—à—Ç–∞–±') {
        message += `\n\n–ñ–º—ë–º –ø—Ä—É–∂–∏–Ω—É –Ω–∞ –≤–µ—Ä—à–∏–Ω—É!`;
    }
    
    return message;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
async function finalizeSale(sessionKey, session) {
    const chatId = session.chatId;
    console.log(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${sessionKey}...`);
    
    // –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (const messageId of session.messagesToDelete) {
        await deleteMessage(chatId, messageId);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const saleMessage = generateSaleMessage(session.data);
    console.log(`üìÑ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—É –∂–µ —Ç–µ–º—É
    await bot.sendMessage(chatId, saleMessage, {
        message_thread_id: session.messageThreadId
    });
    
    // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ (–±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞)
    setTimeout(async () => {
        const actionKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ûï –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç', callback_data: 'new_calculation' }]
                ]
            }
        };
        
        await bot.sendMessage(chatId, '‚¨ÜÔ∏è', {
            ...actionKeyboard,
            message_thread_id: session.messageThreadId
        });
        
        console.log(`‚úÖ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è ${sessionKey}!`);
    }, 500);
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete userSessions[sessionKey];
}

// –ö–æ–º–∞–Ω–¥–∞ /sale - –∑–∞–ø—É—Å–∫ —Ä–∞—Å—á—ë—Ç–∞
bot.onText(/\/sale/, async (msg) => {
    const chatId = msg.chat.id;
    const messageThreadId = msg.message_thread_id; // ID —Ç–µ–º—ã –≤ –≥—Ä—É–ø–ø–µ
    const sessionKey = `${chatId}_${messageThreadId || 'main'}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    
    console.log(`üóùÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from.first_name} –≤ —á–∞—Ç–µ ${chatId}, —Ç–µ–º–∞: ${messageThreadId}, –∫–ª—é—á: ${sessionKey}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
    if (userSessions[sessionKey]) {
        console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è ${sessionKey}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É /sale`);
        await deleteMessage(chatId, msg.message_id);
        return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await deleteMessage(chatId, msg.message_id);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userSessions[sessionKey] = {
        step: 'clientName',
        data: {},
        messagesToDelete: [], // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        messageThreadId: messageThreadId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–º—ã
        chatId: chatId // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞
    };
    
    const sentMessage = await bot.sendMessage(chatId, 'üóùÔ∏è *–†–∞—Å—á—ë—Ç –Ω–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:', {
        parse_mode: 'Markdown',
        message_thread_id: messageThreadId // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç—É –∂–µ —Ç–µ–º—É
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    userSessions[sessionKey].messagesToDelete.push(sentMessage.message_id);
    console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –∫–ª—é—á–æ–º ${sessionKey}, –∂–¥—ë–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞`);
});

// –ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const messageThreadId = msg.message_thread_id;
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await deleteMessage(chatId, msg.message_id);
    
    const helpText = `ü§ñ *–ë–æ—Ç —Ä–∞—Å—á—ë—Ç–∞ –æ–ø–ª–∞—Ç*

üìù *–ö–æ–º–∞–Ω–¥—ã:*
/sale - –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç –Ω–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á—ë—Ç
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí∞ *–¢–∞—Ä–∏—Ñ—ã –∫–æ–º–∏—Å—Å–∏–π:*
‚Ä¢ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä - 7%
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ - 8%
‚Ä¢ –ú–∞—Å—à—Ç–∞–± - 10%
‚Ä¢ –ê–±—Å–æ–ª—é—Ç - 12%

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /sale –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!`;
    
    const helpMessage = await bot.sendMessage(chatId, helpText, { 
        parse_mode: 'Markdown',
        message_thread_id: messageThreadId
    });
    
    // –£–¥–∞–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
        await deleteMessage(chatId, helpMessage.message_id);
    }, 15000);
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
bot.onText(/\/cancel/, async (msg) => {
    const chatId = msg.chat.id;
    const messageThreadId = msg.message_thread_id;
    const sessionKey = `${chatId}_${messageThreadId || 'main'}`;
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await deleteMessage(chatId, msg.message_id);
    
    if (userSessions[sessionKey]) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        if (userSessions[sessionKey].messagesToDelete) {
            for (const messageId of userSessions[sessionKey].messagesToDelete) {
                await deleteMessage(chatId, messageId);
            }
        }
        
        delete userSessions[sessionKey];
        console.log(`‚ùå –°–µ—Å—Å–∏—è ${sessionKey} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
        
        const cancelMessage = await bot.sendMessage(chatId, '‚ùå –†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.\n\n–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /sale', {
            message_thread_id: messageThreadId
        });
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            await deleteMessage(chatId, cancelMessage.message_id);
        }, 3000);
    } else {
        const noSessionMessage = await bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /sale', {
            message_thread_id: messageThreadId
        });
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            await deleteMessage(chatId, noSessionMessage.message_id);
        }, 3000);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const messageThreadId = message.message_thread_id;
    const data = callbackQuery.data;
    const sessionKey = `${chatId}_${messageThreadId || 'main'}`;
    
    if (!userSessions[sessionKey] && data !== 'new_calculation') {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sale' });
        return;
    }
    
    const session = userSessions[sessionKey];
    
    if (session && session.step === 'package') {
        session.data.packageType = data;
        session.step = 'practicesCount';
        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: ${data}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞–∫–µ—Ç–∞
        await bot.editMessageText(
            `‚úÖ –í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: *${data}* (${Math.round(packageRates[data].rate * 100)}%)\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏–∫:`,
            {
                chat_id: chatId,
                message_id: message.message_id,
                parse_mode: 'Markdown',
                message_thread_id: session.messageThreadId
            }
        );
        
        bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã–±—Ä–∞–Ω ${data}` });
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—à–∞–º–∏
    if (session && session.step === 'remainderPayments') {
        if (data === 'add_tranches') {
            session.step = 'tranches_count';
            await bot.editMessageText(
                `üí∞ –û—Å—Ç–∞—Ç–æ–∫: ${formatAmount(session.data.remainingAmount)}\n\n–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Ç—Ä–∞–Ω—à–µ–π? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`,
                {
                    chat_id: chatId,
                    message_id: message.message_id,
                    message_thread_id: session.messageThreadId
                }
            );
            bot.answerCallbackQuery(callbackQuery.id, { text: '–£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—à–µ–π' });
        } else if (data === 'skip_tranches') {
            bot.answerCallbackQuery(callbackQuery.id, { text: '–£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫' });
            await finalizeSale(sessionKey, session);
        } else if (data === 'add_more_tranches') {
            session.step = 'tranche_amount';
            await bot.editMessageText(
                `üí∞ –û—Å—Ç–∞—Ç–æ–∫: ${formatAmount(session.data.remainingAmount)}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—à–∞:`,
                {
                    chat_id: chatId,
                    message_id: message.message_id,
                    message_thread_id: session.messageThreadId
                }
            );
            bot.answerCallbackQuery(callbackQuery.id, { text: '–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—à' });
        } else if (data === 'finish_tranches') {
            bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–≤–µ—Ä—à–∞–µ–º' });
            await finalizeSale(sessionKey, session);
        }
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞
    if (data === 'new_calculation') {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç!' });
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await deleteMessage(chatId, message.message_id);
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç
        userSessions[sessionKey] = {
            step: 'clientName',
            data: {},
            messagesToDelete: [],
            messageThreadId: messageThreadId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
            chatId: chatId
        };
        
        const sentMessage = await bot.sendMessage(chatId, 'üóùÔ∏è *–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–¥–∞–∂–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:', {
            parse_mode: 'Markdown',
            message_thread_id: messageThreadId
        });
        
        userSessions[sessionKey].messagesToDelete.push(sentMessage.message_id);
        console.log(`‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –∫–ª—é—á–æ–º ${sessionKey}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const messageThreadId = msg.message_thread_id; // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sessionKey = `${chatId}_${messageThreadId || 'main'}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && text.startsWith('/')) {
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
    if (!userSessions[sessionKey]) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        console.log(`üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è ${sessionKey}, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ`);
        await deleteMessage(chatId, msg.message_id);
        return;
    }
    
    const session = userSessions[sessionKey];
    
    console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "${text}" –Ω–∞ —à–∞–≥–µ: ${session.step} (–∫–ª—é—á: ${sessionKey})`);
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await deleteMessage(chatId, msg.message_id);
    
    switch (session.step) {
        case 'clientName':
            session.data.clientName = text.trim();
            session.step = 'masterName';
            console.log(`‚úÖ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${session.data.clientName}`);
            
            const masterMessage = await bot.sendMessage(chatId, 'üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ë–ª –∫–ª–∏–µ–Ω—Ç–∞:', {
                message_thread_id: session.messageThreadId
            });
            session.messagesToDelete.push(masterMessage.message_id);
            break;
            
        case 'masterName':
            session.data.masterName = text.trim();
            session.step = 'package';
            console.log(`‚úÖ –ò–º—è –º–∞—Å—Ç–µ—Ä–∞: ${session.data.masterName}`);
            
            const packageKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üü¢ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä (7%)', callback_data: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä' }],
                        [{ text: 'üîµ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ (8%)', callback_data: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ' }],
                        [{ text: 'üü° –ú–∞—Å—à—Ç–∞–± (10%)', callback_data: '–ú–∞—Å—à—Ç–∞–±' }],
                        [{ text: 'üî¥ –ê–±—Å–æ–ª—é—Ç (12%)', callback_data: '–ê–±—Å–æ–ª—é—Ç' }]
                    ]
                }
            };
            
            const packageMessage = await bot.sendMessage(chatId, 'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:', {
                ...packageKeyboard,
                message_thread_id: session.messageThreadId
            });
            session.messagesToDelete.push(packageMessage.message_id);
            break;
            
        case 'practicesCount':
            const practicesCount = parseInt(text);
            if (isNaN(practicesCount) || practicesCount < 1) {
                const errorMessage = await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏–∫ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):', {
                    message_thread_id: session.messageThreadId
                });
                session.messagesToDelete.push(errorMessage.message_id);
                return;
            }
            
            session.data.practicesCount = practicesCount;
            session.step = 'totalAmount';
            console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏–∫: ${practicesCount}`);
            
            const totalMessage = await bot.sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):', {
                message_thread_id: session.messageThreadId
            });
            session.messagesToDelete.push(totalMessage.message_id);
            break;
            
        case 'totalAmount':
            const totalAmount = parseFloat(text.replace(/\s/g, ''));
            if (isNaN(totalAmount) || totalAmount <= 0) {
                const errorMessage = await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:', {
                    message_thread_id: session.messageThreadId
                });
                session.messagesToDelete.push(errorMessage.message_id);
                return;
            }
            
            session.data.totalAmount = totalAmount;
            session.step = 'paidAmount';
            console.log(`‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalAmount}`);
            
            const paidMessage = await bot.sendMessage(chatId, 'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∫–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª:', {
                message_thread_id: session.messageThreadId
            });
            session.messagesToDelete.push(paidMessage.message_id);
            break;
            
        case 'paidAmount':
            const paidAmount = parseFloat(text.replace(/\s/g, ''));
            if (isNaN(paidAmount) || paidAmount <= 0) {
                const errorMessage = await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:', {
                    message_thread_id: session.messageThreadId
                });
                session.messagesToDelete.push(errorMessage.message_id);
                return;
            }
            
            if (paidAmount > session.data.totalAmount) {
                const errorMessage = await bot.sendMessage(chatId, '‚ö†Ô∏è –û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:', {
                    message_thread_id: session.messageThreadId
                });
                session.messagesToDelete.push(errorMessage.message_id);
                return;
            }
            
            session.data.paidAmount = paidAmount;
            console.log(`‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: ${paidAmount}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –æ—Å—Ç–∞—Ç–æ–∫
            const remainder = session.data.totalAmount - paidAmount;
            if (remainder > 0) {
                session.step = 'remainderPayments';
                session.data.remainderPayments = [];
                session.data.remainingAmount = remainder;
                console.log(`üí∞ –û—Å—Ç–∞—Ç–æ–∫: ${remainder}, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ç—Ä–∞–Ω—à–∏`);
                
                const remainderKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –î–∞, —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã —Ç—Ä–∞–Ω—à–µ–π', callback_data: 'add_tranches' }],
                            [{ text: '‚è© –ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫', callback_data: 'skip_tranches' }]
                        ]
                    }
                };
                
                const remainderMessage = await bot.sendMessage(
                    chatId, 
                    `üí∞ –û—Å—Ç–∞—Ç–æ–∫ –∫ –¥–æ–ø–ª–∞—Ç–µ: ${formatAmount(remainder)}\n\n–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –±—É–¥—É—â–∏—Ö —Ç—Ä–∞–Ω—à–µ–π?`, 
                    {
                        ...remainderKeyboard,
                        message_thread_id: session.messageThreadId
                    }
                );
                session.messagesToDelete.push(remainderMessage.message_id);
            } else {
                // –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–µ—Ç, —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                console.log(`‚úÖ –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
                await finalizeSale(sessionKey, session);
            }
            break;
            
        case 'tranches_count':
            const tranchesCount = parseInt(text);
            if (isNaN(tranchesCount) || tranchesCount < 1) {
                const errorMessage = await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—à–µ–π (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):', {
                    message_thread_id: session.messageThreadId
                });
                session.messagesToDelete.push(errorMessage.message_id);
                return;
            }
            
            session.data.totalTranches = tranchesCount;
            session.data.currentTrancheIndex = 1;
            session.step = 'tranche_amount';
            
            const firstTrancheMessage = await bot.sendMessage(chatId, `üí∞ –¢—Ä–∞–Ω—à 1 –∏–∑ ${tranchesCount}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–∞–Ω—à–∞:`, {
                message_thread_id: session.messageThreadId
            });
            session.messagesToDelete.push(firstTrancheMessage.message_id);
            break;
            
        case 'tranche_amount':
            const trancheAmount = parseFloat(text.replace(/\s/g, ''));
            if (isNaN(trancheAmount) || trancheAmount <= 0) {
                const errorMessage = await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ç—Ä–∞–Ω—à–∞:', {
                    message_thread_id: session.messageThreadId
                });
                session.messagesToDelete.push(errorMessage.message_id);
                return;
            }
            
            if (trancheAmount > session.data.remainingAmount) {
                const errorMessage = await bot.sendMessage(chatId, `‚ö†Ô∏è –°—É–º–º–∞ —Ç—Ä–∞–Ω—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞ (${formatAmount(session.data.remainingAmount)}):`, {
                    message_thread_id: session.messageThreadId
                });
                session.messagesToDelete.push(errorMessage.message_id);
                return;
            }
            
            session.data.currentTranche = { amount: trancheAmount };
            session.step = 'tranche_date';
            
            const dateMessage = await bot.sendMessage(chatId, `üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É ${session.data.currentTrancheIndex}-–≥–æ —Ç—Ä–∞–Ω—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.25 –∏–ª–∏ 15 —Å–µ–Ω—Ç—è–±—Ä—è):`, {
                message_thread_id: session.messageThreadId
            });
            session.messagesToDelete.push(dateMessage.message_id);
            break;
            
        case 'tranche_date':
            const trancheDate = text.trim();
            session.data.currentTranche.date = trancheDate;
            session.data.remainderPayments.push(session.data.currentTranche);
            session.data.remainingAmount -= session.data.currentTranche.amount;
            session.data.currentTrancheIndex++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç—Ä–∞–Ω—à–µ–π
            if (session.data.currentTrancheIndex <= session.data.totalTranches && session.data.remainingAmount > 0) {
                session.step = 'tranche_amount';
                const nextTrancheMessage = await bot.sendMessage(
                    chatId,
                    `‚úÖ –¢—Ä–∞–Ω—à ${session.data.currentTrancheIndex - 1} –¥–æ–±–∞–≤–ª–µ–Ω: ${formatAmount(session.data.currentTranche.amount)} –¥–æ ${trancheDate}\n\nüí∞ –¢—Ä–∞–Ω—à ${session.data.currentTrancheIndex} –∏–∑ ${session.data.totalTranches}\n–û—Å—Ç–∞—Ç–æ–∫: ${formatAmount(session.data.remainingAmount)}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ${session.data.currentTrancheIndex}-–≥–æ —Ç—Ä–∞–Ω—à–∞:`,
                    {
                        message_thread_id: session.messageThreadId
                    }
                );
                session.messagesToDelete.push(nextTrancheMessage.message_id);
            } else {
                // –í—Å–µ —Ç—Ä–∞–Ω—à–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞–≤–µ–Ω –Ω—É–ª—é
                if (session.data.remainingAmount > 0) {
                    // –ï—Å—Ç—å –Ω–µ—É—á—Ç—ë–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–∞–Ω—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    session.data.remainderPayments.push({
                        amount: session.data.remainingAmount,
                        date: '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                    });
                }
                await finalizeSale(sessionKey, session);
            }
            break;
            
        default:
            const helpMessage = await bot.sendMessage(chatId, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /sale', {
                message_thread_id: session?.messageThreadId
            });
            // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(async () => {
                await deleteMessage(chatId, helpMessage.message_id);
            }, 3000);
    }
});

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const messageThreadId = msg.message_thread_id;
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await deleteMessage(chatId, msg.message_id);
    
    const welcomeText = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å—á—ë—Ç–∞ –æ–ø–ª–∞—Ç!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.

üöÄ *–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ:*
/sale - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç

üìö *–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á—ë—Ç`;
    
    const welcomeMessage = await bot.sendMessage(chatId, welcomeText, { 
        parse_mode: 'Markdown',
        message_thread_id: messageThreadId
    });
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
        await deleteMessage(chatId, welcomeMessage.message_id);
    }, 10000);
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
});

bot.on('polling_error', (error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
});

// Graceful shutdown –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});